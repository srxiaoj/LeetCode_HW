import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;

public class PermutationsII {

    public static void main(String[] args) {
        // TODO Auto-generated method stub
//        int[] nums = {-1,2,-1,2,1,-1,2,1};
        int[] nums = {1, 2, 1};
        List<List<Integer>> res = permute(nums);
        printArray(res);
    }
    public static List<List<Integer>> permute(int[] nums) {
        // record down the position of the numbers
        List<List<tuple>> res = new ArrayList<>();
        List<List<Integer>> position2D = new ArrayList<List<Integer>>();
        for (int i = 0; i < nums.length; i++) {
            res.add(Arrays.asList(new tuple(i, nums[i])));
        }
//        printArray(res);
        for (int i = 1; i < nums.length; i++) {
            List<List<tuple>> tmp = new ArrayList<List<tuple>>();
            for (List<tuple> subRes : res) {
                for (int j = 0; j < nums.length; j++) {
                    if (!subRes.contains(new tuple(j, nums[j]))) {
                        List<tuple> newList = new ArrayList<>(subRes);
                        newList.add(new tuple(j, nums[j]));
                        tmp.add(newList);
                    }
                }
            }
            
            if (!tmp.isEmpty()) {
                position2D = tmp;
            }
        }
        printArray(position2D);
        System.out.println("************");
//        List<List<Integer>> permutation = new ArrayList();
//        for (int i = 0; i < res.size(); i++) {
//            List<Integer> subRes = new ArrayList<>();
//            for (int j = 0; j < res.get(i).size(); j++) {
//                subRes.add(nums[res.get(i).get(j)]);
//            }
//            if (!permutation.contains(subRes)) {
//                permutation.add(subRes);
//            }
//        }
//        List<List<Integer>> ans = new ArrayList<List<Integer>>();
//        for (List<Integer> key : permutation) {
//            ans.add(key);
//        }
        List<List<Integer>> ans = removeRedundance(res);
        return ans;
    }
    private static List<List<Integer>> removeRedundance(List<List<Integer>> a) {
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < a.size(); i++) {
            if (!res.contains(a.get(i))) {
                res.add(a.get(i));
            }
        }
        return res;
    }
    public static void printArray(List<List<Integer>> A)
    {
        for(int i = 0; i < A.size(); i++)
        {
            System.out.print(A.get(i) + " ");
        }
    }
}

class tuple {
    int pos;
    int val;
    tuple(int p, int v) {
        pos = p;
        val =v;
    }
}